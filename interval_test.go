package cron

import (
	"testing"
	"time"
)

func TestRoutineScheduleNext(t *testing.T) {
	tests := []struct {
		id                     int
		time, spec, expectNext string
		expectExpired          bool
	}{
		// 天
		{1, "2021-12-01 10:20:00", "routine=0|1||10:10:10|2021-12-01 10:30:00|2021-12-09 09:00:00", "2021-12-02 10:10:10", false},
		{2, "2021-12-01 10:20:00", "routine=0|1||10:40:10|2021-12-01 10:30:00|2021-12-09 09:00:00", "2021-12-01 10:40:10", false},
		{3, "2021-12-01 10:35:00", "routine=0|1||10:40:10|2021-12-01 10:30:00|2021-12-09 09:00:00", "2021-12-01 10:40:10", false},
		{4, "2021-12-01 10:41:00", "routine=0|1||10:40:10|2021-12-01 10:30:00|2021-12-09 09:00:00", "2021-12-02 10:40:10", false},
		{5, "2021-12-09 10:20:00", "routine=0|1||10:10:10|2021-12-01 10:30:00|2021-12-09 09:00:00", "2021-12-10 10:10:10", true},
		{6, "2021-12-02 10:20:00", "routine=0|1||10:40:10|2021-12-01 10:30:00|2021-12-09 09:00:00", "2021-12-02 10:40:10", false},
		{7, "2021-12-02 10:50:00", "routine=0|1||10:40:10|2021-12-01 10:30:00|2021-12-09 09:00:00", "2021-12-03 10:40:10", false},
		{8, "2021-12-01 10:10:00", "routine=0|3||10:20:10|2021-12-01 10:30:00|2021-12-09 09:00:00", "2021-12-04 10:20:10", false},
		{9, "2021-12-01 10:30:00", "routine=0|3||10:40:10|2021-12-01 10:30:00|2021-12-09 09:00:00", "2021-12-01 10:40:10", false},
		{9, "2021-12-01 10:41:00", "routine=0|3||10:40:10|2021-12-01 10:30:00|2021-12-09 09:00:00", "2021-12-04 10:40:10", false},
		{10, "2021-12-10 10:30:00", "routine=0|3||10:20:10|2021-12-01 10:30:00|2021-12-09 09:00:00", "2021-12-13 10:20:10", true},
		// 周
		{100, "2021-12-10 10:30:00", "routine=1|1|0|10:20:10|2022-02-01 10:30:00|2022-03-01 09:00:00", "2022-02-06 10:20:10", false},
		{101, "2022-02-02 10:30:00", "routine=1|1|0|10:20:10|2022-02-01 10:30:00|2022-03-01 09:00:00", "2022-02-06 10:20:10", false},
		{102, "2022-02-06 10:20:00", "routine=1|1|0|10:20:10|2022-02-01 10:30:00|2022-03-01 09:00:00", "2022-02-06 10:20:10", false},
		{103, "2022-02-06 10:40:00", "routine=1|1|0|10:20:10|2022-02-01 10:30:00|2022-03-01 09:00:00", "2022-02-13 10:20:10", false},
		{104, "2022-02-12 10:40:00", "routine=1|1|0|10:20:10|2022-02-01 10:30:00|2022-03-01 09:00:00", "2022-02-13 10:20:10", false},
		{105, "2022-02-06 10:20:00", "routine=1|1|0|10:40:10|2022-02-06 10:30:00|2022-03-01 09:00:00", "2022-02-06 10:40:10", false},
		{106, "2022-02-06 10:41:00", "routine=1|1|0|10:40:10|2022-02-06 10:30:00|2022-03-01 09:00:00", "2022-02-13 10:40:10", false},
		{107, "2022-02-01 10:41:00", "routine=1|1|1|10:40:10|2022-02-02 10:30:00|2022-03-01 09:00:00", "2022-02-07 10:40:10", false},
		{108, "2022-02-01 10:41:00", "routine=1|3|1|10:40:10|2022-02-02 10:30:00|2022-03-01 09:00:00", "2022-02-21 10:40:10", false},
		{109, "2022-02-10 10:41:00", "routine=1|3|4|10:40:10|2022-02-02 10:30:00|2022-03-01 09:00:00", "2022-02-24 10:40:10", false},
		{110, "2022-02-01 10:41:00", "routine=1|3|4|10:40:10|2022-02-25 10:30:00|2022-03-01 09:00:00", "2022-03-17 10:40:10", true},
		// 月
		{200, "2022-02-01 10:41:00", "routine=2|1|5|10:40:10|2022-02-02 10:30:00|2023-03-01 09:00:00", "2022-02-05 10:40:10", false},
		{201, "2022-02-05 10:41:00", "routine=2|1|5|10:40:10|2022-02-02 10:30:00|2022-03-01 09:00:00", "2022-03-05 10:40:10", true},
		{202, "2022-02-02 10:35:00", "routine=2|1|5|10:40:10|2022-02-02 10:30:00|2023-03-01 09:00:00", "2022-02-05 10:40:10", false},
		{203, "2022-03-02 10:35:00", "routine=2|1|5|10:40:10|2022-02-02 10:30:00|2023-03-01 09:00:00", "2022-03-05 10:40:10", false},
		{204, "2022-03-08 10:35:00", "routine=2|1|5|10:40:10|2022-02-02 10:30:00|2023-03-01 09:00:00", "2022-04-05 10:40:10", false},
		{205, "2022-01-20 10:35:00", "routine=2|1|31|10:40:10|2022-01-01 10:30:00|2023-03-01 09:00:00", "2022-01-31 10:40:10", false},
		{206, "2022-01-31 10:41:00", "routine=2|1|31|10:40:10|2022-01-01 10:30:00|2023-03-01 09:00:00", "2022-03-31 10:40:10", false},
		{207, "2022-02-10 10:41:00", "routine=2|1|31|10:40:10|2022-01-01 10:30:00|2023-03-01 09:00:00", "2022-03-31 10:40:10", false},
		{208, "2022-03-10 10:41:00", "routine=2|1|31|10:40:10|2022-01-01 10:30:00|2023-03-01 09:00:00", "2022-03-31 10:40:10", false},
		{209, "2022-04-10 10:41:00", "routine=2|1|31|10:40:10|2022-01-01 10:30:00|2023-03-01 09:00:00", "2022-05-31 10:40:10", false},
		{210, "2022-01-10 10:41:00", "routine=2|2|31|10:40:10|2022-02-01 10:30:00|2023-03-01 09:00:00", "2022-08-31 10:40:10", false},
		{211, "2022-01-10 10:41:00", "routine=2|2|31|10:40:10|2022-01-01 10:30:00|2023-03-01 09:00:00", "2022-01-31 10:40:10", false},
		{212, "2022-02-10 10:41:00", "routine=2|2|31|10:40:10|2022-01-20 10:30:00|2023-03-01 09:00:00", "2022-03-31 10:40:10", false},
		{213, "2022-02-10 10:35:00", "routine=2|2|30|10:40:10|2022-02-20 10:30:00|2023-03-01 09:00:00", "2022-04-30 10:40:10", false},
		{214, "2022-03-10 10:35:00", "routine=2|2|30|10:40:10|2022-02-20 10:30:00|2023-03-01 09:00:00", "2022-04-30 10:40:10", false},
		{215, "2022-01-10 10:35:00", "routine=2|3|31|10:40:10|2021-12-20 10:30:00|2023-03-01 09:00:00", "2022-03-31 10:40:10", false},
		{216, "2022-01-10 10:35:00", "routine=2|12|31|10:40:10|2022-02-20 10:30:00|2023-03-01 09:00:00", "2023-03-03 10:40:10", true},
		{217, "2022-01-10 10:35:00", "routine=2|12|31|10:40:10|2022-02-20 10:30:00|2023-03-08 09:00:00", "2024-03-02 10:40:10", true},
		{218, "2022-03-10 10:35:00", "routine=2|3|31|10:40:10|2022-02-20 10:30:00|2023-03-01 09:00:00", "2022-05-31 10:40:10", false},
		{219, "2022-02-10 10:35:00", "routine=2|4|31|10:40:10|2022-02-20 10:30:00|2023-03-01 09:00:00", "2022-10-31 10:40:10", false},
		{220, "2022-02-28 10:35:00", "routine=2|1|0|10:40:10|2022-02-20 10:30:00|2023-03-01 09:00:00", "2022-02-28 10:40:10", false},
		{221, "2022-02-28 10:41:00", "routine=2|1|0|10:40:10|2022-02-20 10:30:00|2023-03-01 09:00:00", "2022-03-31 10:40:10", false},
		{222, "2022-02-28 10:41:00", "routine=2|2|0|10:40:10|2022-02-20 10:30:00|2023-03-01 09:00:00", "2022-04-30 10:40:10", false},
		{223, "2022-02-28 10:41:00", "routine=2|12|0|10:40:10|2022-02-20 10:30:00|2023-03-01 09:00:00", "2023-02-28 10:40:10", false},
		{224, "2022-02-28 10:41:00", "routine=2|24|0|10:40:10|2022-02-20 10:30:00|2023-03-01 09:00:00", "2024-02-29 10:40:10", true},
		{225, "2022-02-28 10:41:00", "routine=2|3|0|10:40:10|2022-02-20 10:30:00|2023-03-01 09:00:00", "2022-05-31 10:40:10", false},
		{226, "2022-02-01 10:30:00", "routine=2|3|0|10:20:10|2022-02-28 10:30:00|2023-03-01 09:00:00", "2022-05-31 10:20:10", false},
		{227, "2022-02-01 10:30:00", "routine=2|3|15|10:20:10|2022-02-15 10:30:00|2023-03-01 09:00:00", "2022-05-15 10:20:10", false},
		{228, "2023-11-30 10:20:00", "routine=2|3|30|10:20:10|2023-11-30 10:30:00|2025-03-01 09:00:00", "2024-05-30 10:20:10", false},
	}
	parser := NewParser(Routine)
	for _, test := range tests {
		sched, err := parser.Parse(test.spec)
		if err != nil {
			t.Error(err)
			continue
		}
		actual, isExpired := sched.Next(getRoutineTestTime(test.time))
		expectTime := getRoutineTestTime(test.expectNext)
		if actual != expectTime {
			t.Errorf("Fail evaluating %d on %s: (expected) %s != %s (actual)",
				test.id, test.time, test.expectNext, actual)
		}
		if isExpired != test.expectExpired {
			t.Errorf("Fail expired %d on %s: (expected) %v != %v (actual)",
				test.id, test.time, test.expectExpired, isExpired)
		}
	}
}

func getRoutineTestTime(spec string) time.Time {
	parse, _ := time.ParseInLocation("2006-01-02 15:04:05", spec, time.Local)
	return parse
}
